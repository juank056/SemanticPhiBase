package edu.upm.spbw.persistence.bo;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.exception.ExceptionUtils;

import edu.upm.spbw.persistence.dao.ISedrelcoDAO;
import edu.upm.spbw.persistence.dao.ISepconceDAO;
import edu.upm.spbw.utils.Constants;
import edu.upm.spbw.utils.LogLogger;
import edu.upm.spbw.utils.SpringAppContext;

// Generated 28-feb-2016 11:40:56 by Hibernate Tools 3.4.0.CR1

/**
 * Sedconce generated by hbm2java
 */
public class Sedconce implements java.io.Serializable, AbstractBO<Integer> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer dconsecnk;
	private String dcoiricaf;
	private String cosccosak;
	// Relaciones
	private List<Sedrelco> relcos;
	/* Descripcion concepto */
	private String cosdcosaf;

	public Sedconce() {
	}

	/**
	 * Constructor con parametros
	 * 
	 * @param dconsecnk
	 *            Secuencia
	 * @param dcoiricaf
	 *            IRI
	 * @param cosccosak
	 *            Codigo concepto
	 * @param cosdcosaf
	 *            Descripcion Concepto
	 */
	public Sedconce(Integer dconsecnk, String dcoiricaf, String cosccosak,
			String cosdcosaf) {
		this.dconsecnk = dconsecnk;
		this.dcoiricaf = dcoiricaf;
		this.cosccosak = cosccosak;
		this.cosdcosaf = cosdcosaf;
	}

	public Sedconce(String dcoiricaf, String cosccosak) {
		this.dcoiricaf = dcoiricaf;
		this.cosccosak = cosccosak;
	}

	public Integer getDconsecnk() {
		return this.dconsecnk;
	}

	public void setDconsecnk(Integer dconsecnk) {
		this.dconsecnk = dconsecnk;
	}

	public String getDcoiricaf() {
		return this.dcoiricaf;
	}

	public void setDcoiricaf(String dcoiricaf) {
		this.dcoiricaf = dcoiricaf;
	}

	public String getCosccosak() {
		return this.cosccosak;
	}

	public void setCosccosak(String cosccosak) {
		this.cosccosak = cosccosak;
	}

	@Override
	public Integer getPrimaryKey() {
		return dconsecnk;
	}

	@Override
	public void prepareObject() {
		// Campos
		if (this.dcoiricaf == null)
			this.dcoiricaf = Constants.BLANKS;
		else
			this.dcoiricaf = this.dcoiricaf.trim();
		if (this.cosccosak == null)
			this.cosccosak = Constants.BLANKS;
		else
			this.cosccosak = this.cosccosak.trim();
		// Relaciones
		if (this.dconsecnk != null && this.dconsecnk != 0) {
			try {
				// DAO para sedrelco
				ISedrelcoDAO sedrelcoDao = SpringAppContext.getAppContext()
						.getBean(ISedrelcoDAO.class);
				// Busca registros por concepto
				relcos = sedrelcoDao.findByConcept(this.dconsecnk);
			} catch (Exception e) {/* Error cargando registros */
				LogLogger.getInstance(this.getClass()).logger(
						ExceptionUtils.getFullStackTrace(e), LogLogger.ERROR);
			}
		}
		// Descripcion concepto
		this.cosdcosaf = Constants.BLANKS;
		if (!Constants.BLANKS.equals(this.cosccosak)) {
			try {
				// DAO para sepconce
				ISepconceDAO sepconceDao = SpringAppContext.getAppContext()
						.getBean(ISepconceDAO.class);
				// Busca registro
				Sepconce conce = sepconceDao.findById(this.cosccosak);
				if (conce != null)
					this.cosdcosaf = conce.getCosdcosaf();
			} catch (Exception e) {/* Error cargando registros */
				LogLogger.getInstance(this.getClass()).logger(
						ExceptionUtils.getFullStackTrace(e), LogLogger.ERROR);
			}
		}
	}

	@Override
	public void prepareToUpdate() {

	}

	/**
	 * @return the relcos
	 */
	public List<Sedrelco> getRelcos() {
		if (relcos == null)
			relcos = new ArrayList<Sedrelco>();
		return relcos;
	}

	/**
	 * @param relcos
	 *            the relcos to set
	 */
	public void setRelcos(List<Sedrelco> relcos) {
		this.relcos = relcos;
	}

	/**
	 * @return the cosdcosaf
	 */
	public String getCosdcosaf() {
		return cosdcosaf;
	}

	/**
	 * @param cosdcosaf
	 *            the cosdcosaf to set
	 */
	public void setCosdcosaf(String cosdcosaf) {
		this.cosdcosaf = cosdcosaf;
	}

}
